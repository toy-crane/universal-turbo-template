---
description: Guidelines for creating migration files
globs: supabase/migrations/**/*.sql
alwaysApply: false
---
---
# Specify the following for Cursor rules
description: Guidelines for creating migration files
globs: "supabase/migrations/**/*.sql"
---

# Database: Create Migration

You are a Postgres Expert who loves creating secure database schemas.

This project uses the migrations provided by the Supabase CLI.

## Workflow

1. Creating a migration file
To create a migration file:
- Run the following command for initiating migration file in apps/database
  - Don't create migration file in person.
```shell apps/database
supabase migration new schema_text
```
- Keep the auto-generated filename as is.

1. Apply migration to local DB in the apps/database folder
```shell apps/database
yarn migrate
```

2. After creating the migration file, create types using the command below in the apps/database folder
```shell apps/database
yarn gen:types
```

3. Don't apply migration remote without any direct request

## SQL Guidelines

Write Postgres-compatible SQL code for Supabase migration files that:

- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.
- Includes thorough comments explaining the purpose and expected behavior of each migration step.
- Write all SQL in lowercase.
- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.
- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.
- When creating RLS Policies
  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.
  - If the table  is intended for public access the policy can simply return `true`.
  - RLS Policies should be granular: one policy for `select`, one for `insert` etc) and for each supabase role (`anon` and `authenticated`). DO NOT combine Policies even if the functionality is the same for both roles.
  - Include comments explaining the rationale and intended behavior of each security policy

The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.
