---
description: 
globs: apps/app/**
alwaysApply: false
---
## Tech Stack

- Turbo repo with yarn
- React Native, Expo 52
- Tailwind CSS, Nativewind, React Native Reusable
- Supabase, Supabase Auth, Supabase Edge functions
- Vecel AI SDK
- RevenueCat, PostHog, Sentry 
- TypeScript

## Folder Structure

```
├── apps                                    # Application code for different platforms
│   └── mobile                            # Mobile application (Expo/React Native)
│       ├── app                           # App router directory for Expo
│       │   ├── (authenticated)           # Routes that require authentication
│       │   └── (public)                  # Publicly accessible routes
│       ├── assets                        # Static assets for the mobile app
│       │   ├── fonts                     # Custom fonts
│       │   └── images                    # Image assets
│       ├── components                    # Shared UI components
│       │   └── ui                        # React Native Reusable (RNR) library components only
│       ├── contexts                      # Shared state management contexts
│       ├── features                      # Domain-specific feature modules (includes hooks, components, contexts)
│       │   ├── auth                      # Authentication related features
│       │   └── chat                      # Chat functionality features
│       └── lib                           # Shared utilities and helpers
│           └── icons                     # Icon components and assets
```


## Naming Conventions

- Use kebab-case for files, directories names
- Favor named exports for components and utilities expo project
- Component naming patterns for Expo routes:
  - For route pages (`index.tsx`):
    - File name MUST be `index.tsx`
    - Component MUST be named `Page`
    - Example: `export default function Page() { ... }`
  - For layouts (`layout.tsx`):
    - File name MUST be `layout.tsx`
    - Component MUST be named `Layout`
    - Example: `export default function Layout() { ... }`
  - All other component names should use PascalCase with descriptive suffixes

## Authentication

- Use Supabase Auth for all authentication:
  - OAuth providers only (no email/password)
  - Implement auto token refresh
  - Handle auth state changes globally
  - Use RLS policies for data access control
  - Store user metadata in profiles table


## Supabase Usage

Use the Supabase client for database interactions and real-time subscriptions
instead of creating custom APIs.

- Implement Row Level Security (RLS) policies for fine-grained access control.
- Use Supabase Auth for user authentication and management.
- Leverage Supabase Storage for file uploads and management.
- Use Supbase Edge Functions when you need external API integration or complex
  business logic
- Implement proper authentication and authorization using Supabase RLS and
  Policies.
- Follow Supabase's type generation practices for database types

## Package management

- Use yarn for package management
- if you need to install a package in expo project, use
  `npx expo install <package>`
